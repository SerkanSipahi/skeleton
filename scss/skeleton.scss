@charset "UTF-8";
/* Skeleton Tablet-First */

/*
 * Dont be afraid about the generated css ( skeleton.css ) code !
 * Addyosmanis grunt uncss ( https://github.com/addyosmani/grunt-uncss )
 * remove, based on index.html, unused css ;)
 */

// @todo: bug: if we havent top or bottom elementin dom, the
// @todo: wenn: data-sk-align nicht angegeben dann ist es immer data-sk-align="default"
// @todo: alle variablen aus sk-... ändern also als namespaces
//        scollen diese Bereiche. Und wenn die Maus ausserhalb der
//        bereiche(also im desktop modus), scrollen alle bereiche gleichzeitig.
//        Natuerlich wenn es was zu scollen exisitiert
// sk-left/sk-right/sk-content strechted to top or bottom


.overflow-hidden   { overflow : hidden; }
.overflow-auto     { overflow : auto;  }
.position-relative { position : relative ; }
.position-absolute { position : absolute ; }


#skeleton {
	.sk-left-nav,
	.sk-top-nav,
	.sk-right-nav,
	.sk-bottom-nav,
	.sk-content {
		@include transition(all 250ms ease-in);
	}
};

body, html {
  @extend .overflow-hidden;
  height : 100%;
}

$core-main-wrapper-x   : 1500px !default; // > width
$core-left-nav-x       :  300px !default; // > width
$core-right-nav-x      :   80px !default; // > width
$core-top-nav-x        :   50px !default; // > height
$core-bottom-nav-x     :  100px !default; // > height
$core-gutter           :   10px !default;

$core-first-breakpoint : 1024 !default;
$core-breakpoints : ( 1024px 951px, 950px 481px, 480px 351px, 350px 280px);

$positions : (
	left   : $core-left-nav-x,
	right  : $core-right-nav-x,
	top    : $core-top-nav-x,
	bottom : $core-bottom-nav-x
);

#skeleton {

    // > debug color
    background-color: gray;

    @extend .overflow-hidden;
    @extend .position-relative;

    margin     : 0 auto;
    max-width  : $core-main-wrapper-x;
    height     : auto !important;
    min-height : 100%;

    // > common atrributes
	.sk-left-nav {
		background-color: green;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 10;
		width   : $core-left-nav-x;
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);
	}
	.sk-right-nav {
		background-color: yellow;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 10;
		width   : $core-right-nav-x;
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);;
	}
    .sk-top-nav {
        background-color: red;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 9;
	    height  : $core-top-nav-x;
	    left    : 0;
	    right   : 0;
    }
    .sk-bottom-nav {
        background-color: deeppink;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 9;
	    height  : $core-bottom-nav-x;
	    left    : 0;
	    right   : 0;
    }
	// > content area
	.sk-content {
		background-color: blue;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 20; // wenn z-index hier angepasst wird, z-index hier createCoreSkWallPositions nicht vergessen
		// > if we havent left or right nav in dom,
		//   this will be the default value of sk-content
		left    : 0;
		right   : 0;
		///////////////////////////////////////////
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);;
	}
	@mixin createCoreSkWallPositions($position, $align, $width){

		// > here the outer wall( navs--> left, right, top, bottom )
		// > @align default, static, @positions(left,right,top,bottom), back, front
		// =====================================================
		// > set position of .sk-#{$position}-nav[data-sk-align="#{$align}"]
		// > e.g. with sk-left-nav[data-sk-align="*"]

		//   .sk-left-nav[data-sk-align="left"]  { $position(left)   : -$width(300) }
		//   .sk-right-nav[data-sk-align="right"] { $position(right)  : -$width(300) }
		//   .sk-top-nav[data-sk-align="top"]   { $position(top)    : -$width(50) }
		//   .sk-bottom-nav[data-sk-align="bottom"]{ $position(bottom) : -$width(100) }
		//   and only aligns --> left/right/top/bottom
		//	 etc. sk-left/top/right/bottom

		// > ***INFO*** hier auch mit @at-root
		//   ********** dafuer kann das auessere von @include createPositions raus

		// if >>> left,right,top,bottom
		@if($align != default and $align != static and $align != back and $align != front){

			// > outside: left/left, top/top, right/right, bottom/bottom
			.sk-#{$position}-nav[data-sk-align="#{$align}"] {
				#{$position} : $width * -1;
			}
			// > outside
			.sk-#{$position}-nav[data-sk-align="outside"] {
				#{$position} : $width * -1;
			}

			//   .sk-left-nav[data-sk-align="default"] { $position(left) : 0 }
			//   .sk-left-nav[data-sk-align="static"]  { $position(left) : 0  }
			//   .sk-left-nav[data-sk-align="back"]    { $position(left) : 0  }
			//   .sk-left-nav[data-sk-align="front"]   { $position(left) : 0  }
			//   and only aligns --> default/static/back/front
			//	 etc. sk-left/top/right/bottom

		// if >>> default/static/back/front
		} @else {

			.sk-#{$position}-nav[data-sk-align="#{$align}"] {
				#{$position} : 0;

				// > align=front has the same setting. The only difference is the z-index
				@if($align == front and ( $position == top or $position == bottom )){
					// > debug opacity
					opacity: 0.5;
					z-index: 22 !important;
				}
			}
		}
	}
	@mixin createCoreSkContentPositions($position, $align, $width){

		// > here the inner wall( content )

		// > @align default, static, @positions(left,right,top,bottom), back, front

		// > set position of .sk-content[data-sk-#{$position}-opt="#{$align}"]
		// > e.g. with sk-content[data-sk-left-top="*"]
		//   .sk-content[data-sk-left-opt="default"] { $position : $width; }
		//   .sk-content[data-sk-left-opt="static"]  { $position : $width; }
		//   .sk-content[data-sk-left-opt="front"]   { $position : 0; }
		//   .sk-content[data-sk-left-opt="left"]    { $position : 0; }
		//   .sk-content[data-sk-left-opt="right"]   { $position : 0; }
		//   .sk-content[data-sk-left-opt="back"]    { $position : 0; }
		//   .sk-content[data-sk-left-opt="top"]     { $position : 0; }
		//   .sk-content[data-sk-left-opt="bottom"]  { $position : 0; }


		.sk-content[data-sk-#{$position}-opt="#{$align}"] {
			@if($align != default and $align != static and $align){
				#{$position} : 0;
			} @else {
				#{$position} : $width /*!important*/;
			}
		}
	}
	@mixin createCoreSkTopBottomPositions($position, $align, $width){

		// *** relatedTo->(1) skeleton.js ***
		// > css for left and right navi if
		//   top=back,top or bottom=back,bottom

		@if(( $align == top or $align == back or $align == bottom or $align == front ) and
			( $position == top or $position == bottom )){

			// .sk-left-nav[data-sk-top-opt="top"]    { top : 0; }
			// .sk-left-nav[data-sk-top-opt="back"]   { top : 0; }
			// .sk-left-nav[data-sk-top-opt="front"]  { top : 0; }
			// .sk-left-nav[data-sk-top-opt="bottom"] { top : 0; }

			// .sk-left-nav[data-sk-bottom-opt="top"]    { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="back"]   { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="front"]  { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="bottom"] { bottom : 0; }

			@each $navAlign in left right {
				.sk-#{$navAlign}-nav[data-sk-#{$position}-opt="#{$align}"] {
					#{$position} : 0;
				}
			}

		}
	}
	@mixin createCoreSkFloatPositions(){

		@each $item in default, static {
			.sk-left-nav[data-sk-align="#{$item}"][data-sk-float],
			.sk-right-nav[data-sk-align="#{$item}"][data-sk-float] {
				top: 0; bottom: 0;
			}
		}

		@each $item in left, right {
			@each $align in default, static, front {
				// >>> wenn nur an der linken oder rechten navi data-sk-float angeben wurde
				.sk-top-nav[data-sk-align="#{$align}"][data-sk-opt-float="#{$item}"] {
					#{$item} : map-get($positions, $item);
				}
				.sk-bottom-nav[data-sk-align="#{$align}"][data-sk-opt-float="#{$item}"] {
					#{$item} : map-get($positions, $item);
				}
				// >>> wenn auf linker und rechter navi data-sk-float angegen wurde
				.sk-top-nav[data-sk-align="#{$align}"][data-sk-opt-float="left,right"] {
					left: map-get($positions, left); right: map-get($positions, right);
				}
				.sk-bottom-nav[data-sk-align="#{$align}"][data-sk-opt-float="left,right"] {
					left: map-get($positions, left); right: map-get($positions, right);
				}
			}
		}


	}
	@mixin create-media-queries($min, $max, $positions){

		@media (min-width: $min) and (max-width: $max){

			// >>> wenn left/right-navi static, top/bottom-navi static,
			// und left/right-navi data-sk-float, dann top/bottom-nav nicht
			// position left=0/right=0 sondern top/bottom-nav = $nav-with

			.sk-top-nav:not(.sk-top-nav[data-sk-opt-float="left"]),
			.sk-bottom-nav:not(.sk-bottom-nav[data-sk-opt-float="left"]) {
				left:0!important;right:0!important;
			}

			// >>> *****************************************************************

			// wenn left/top/right/bottom -nav=default oder front, dann navs nach
			// aussen aussrichten
			// info: diese attribute dynamisch(javascript) eingebunden
			@each $item in default, front {
				.sk-content[data-sk-left-opt="#{$item}"] { left:0 !important; }
				.sk-content[data-sk-right-opt="#{$item}"] { right:0 !important; }
				.sk-content[data-sk-top-opt="#{$item}"] { top:0 !important; }
				.sk-content[data-sk-bottom-opt="#{$item}"] { bottom:0 !important; }
			}

			// >>> *****************************************************************

			// wenn nur static angegeben dann nehmen alle ihre positionen ein und ändern sich nicht
			.sk-content[data-sk-left-opt="static"] { left: map-get($positions, left) !important; }
			.sk-content[data-sk-right-opt="static"] { right: map-get($positions, right) !important; }
			.sk-content[data-sk-top-opt="static"] { top: map-get($positions, top) !important; }
			.sk-content[data-sk-bottom-opt="static"] { bottom: map-get($positions, bottom) !important; }

			// >>> *****************************************************************

			// >>> static mit der z Achse vorziehen!

			[data-sk-align="static"] { z-index: 10; }
			[data-sk-align="default"], [data-sk-align="front"] { z-index:  9; }

			// >>> wenn top-navi oder bottom-navi default ist und linke oder rechte navi static,
			// dann muss linker/rechter navi top:0, bottom:0 gesetzt werden

			.sk-left-nav[data-sk-top-opt="default"],
			.sk-right-nav[data-sk-top-opt="default"]{
				top:0;
			}
			.sk-left-nav[data-sk-bottom-opt="default"],
			.sk-right-nav[data-sk-bottom-opt="default"] {
				bottom:0;
			}

		}

		// > static:until(n)

		$__skeleton-until-navs__ : __skeleton-until-navs__;

		// > special untils ( if top or bottom greater than left or right nav)
		@if($__skeleton-until-navs__ != __skeleton-until-navas__){
			@debug xxxxxxxxx---------test;
		}

		// > default untils
		@each $navigation, $size in $__skeleton-until-navs__ {

			@if $navigation != __skeleton-until-navs__ {

				.sk-#{$navigation}-nav[data-sk-align^="static:until"]{
					#{$navigation} : 0;
				}

				//float and until
				@if $navigation == left or $navigation == right {
					.sk-#{$navigation}-nav[data-sk-align^="static:until"][data-sk-float]{
						top : 0; bottom: 0;
					}
				}

				@media (min-width: $size) {
					.sk-content[data-sk-#{$navigation}-opt="static:until(#{$size})"] {
						#{$navigation}: map-get($positions, $navigation) !important;
					}
				}
				@media (max-width: $size - 1px) {
					.sk-content[data-sk-#{$navigation}-opt="static:until(#{$size})"] {
						#{$navigation}:0 !important;
					}
				}
			}
		}

		// > die klassen/regeln werden dynamisch per javascript eingebunden.
		// wenn top oder bottom navi grösser(until) left oder right,
		// dann muss z.B. bei top größer, linke und rechte navi top: 0px werden
		@if top == __top__{
			.sk-left-nav[data-top-nav-greater-this-class],
			.sk-right-nav[data-top-nav-greater-this-class]{
				top : 0;
			}
		}
		@if bottom == __bottom__ {
			.sk-left-nav[data-bottom-nav-greater-this-class],
			.sk-right-nav[data-bottom-nav-greater-this-class]{
				bottom : 0;
			}
		}

	}

	// >>> init Skeleton
	// >>> als funktion auslagern
	@each $position, $dimension in $positions {

		// >>> definition description
		// @posible align: default, static, {left, right, top, bottom}, back, front
		// > all positions has following aligns: default, static, back and front,
		//   the only difference is that:
		//		- left nav has, in addition, the left align
		//		- right nav has, in addition, the right align
		//		- top nav has, in addition, the top align
		//		- bottom nav has, in addition, the bottom align
		@each $align  in default, static, $position, back, front {
			// > .sk-... move inside createCoreSkWallPositions
			@include createCoreSkWallPositions($position, $align, $dimension);
			@include createCoreSkContentPositions($position, $align, $dimension);
			@include createCoreSkTopBottomPositions($position, $align, $dimension);
		}
	}
	// >> you can add only left-nav data-sk-float="left" and
	// >> right-nav data-sk-float="right"
	@include createCoreSkFloatPositions();

	// >>> init breakpoints
	// >>> als funktion auslagern
	// >>> oientation portrait oder orientation landcape übermitteln können
	// mit groesse, also portrait= ab 768 und landscape ab 1024
	@include create-media-queries(0px, 1024px, $positions);
}