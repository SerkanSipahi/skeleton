/* Skeleton */

/*
 * Dont be afraid about the generated css ( skeleton.css ) code !
 * Addyosmanis grunt uncss ( https://github.com/addyosmani/grunt-uncss )
 * remove, based on index.html, unused css ;)
 */

.overflow-hidden   { overflow : hidden; }
.overflow-auto     { overflow : auto;  }
.position-relative { position : relative ; }
.position-absolute { position : absolute ; }

body, html {
  @extend .overflow-hidden;
  height : 100%;
}

$core-main-wrapper-width     : 1200px !default;
$core-left-nav-width         :  300px !default;
$core-right-nav-width        :  300px !default;
$core-top-nav-height         :   50px !default;
$core-bottom-nav-height      :  100px !default;
$core-gutter                 :   10px !default;

$core-first-breakpoint       : 1024px !default;

#skeleton {

    // > debug color
    background-color: gray;

    @extend .overflow-hidden;
    @extend .position-relative;

    margin     : 0 auto;
    max-width  : $core-main-wrapper-width;
    height     : auto !important;
    min-height : 100%;

    // > common atrributes
	.sk-left-nav {
		background-color: green;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 0;
		width   : $core-left-nav-width;
		top     : if($core-top-nav-height != 0px, $core-top-nav-height, 0);
		bottom  : if($core-bottom-nav-height != 0px, $core-bottom-nav-height, 0);
	}
	.sk-right-nav {
		background-color: yellow;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 0;
		width   : $core-right-nav-width;
		top     : if($core-top-nav-height != 0px, $core-top-nav-height, 0);
		bottom  : if($core-bottom-nav-height != 0px, $core-bottom-nav-height, 0);;
	}
    .sk-top-nav {
        background-color: red;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 0;
	    height  : $core-top-nav-height;
	    left    : 0;
	    right   : 0;
    }
    .sk-bottom-nav {
        background-color: deeppink;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 0;
	    height  : $core-bottom-nav-height;
	    left    : 0;
	    right   : 0;
    }
	// > content area
	.sk-content {
		background-color: blue;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 1;
		top     : if($core-top-nav-height != 0px, $core-top-nav-height, 0);
		bottom  : if($core-bottom-nav-height != 0px, $core-bottom-nav-height, 0);;
	}

	@mixin createPositions($position, $align, $width) {

		// > set position of .sk-#{$position}-nav[data-sk-align="#{$align}"]
		// > e.g. with sk-left-nav[data-sk-align="*"]
		//   .sk-left-nav[data-sk-align="default"] { $position(left) : 0 }
		//   .sk-left-nav[data-sk-align="static"]  { $position(left) : 0  }
		//   .sk-left-nav[data-sk-align="left"]    { $position(left) : -$width(300) }
		//   .sk-left-nav[data-sk-align="back"]    { $position(left) : 0  }

		//   or

		//   .sk-top-nav[data-sk-align="default"] { $position(top) : 0 }
		//   .sk-top-nav[data-sk-align="static"]  { $position(top) : 0  }
		//   .sk-top-nav[data-sk-align="top"]     { $position(top) : -$width(50) }
		//   .sk-top-nav[data-sk-align="back"]    { $position(top) : 0  }

		//only excepted values: left, right, top, bottom
		@if($align != default and $align != static and $align != back){
			#{$position} : $width * -1;
		} @else {
			#{$position} : 0;
		}

		// > set position of .sk-content[data-sk-#{$position}-opt="#{$align}"]
		// > e.g. with sk-content[data-sk-left-top="*"]
		//   .sk-content[data-sk-left-opt="default"] { $position : $width; }
		//   .sk-content[data-sk-left-opt="static"]  { $position : $width;  }
		//   .sk-content[data-sk-left-opt="left"]    { $position : 0;  }
		//   .sk-content[data-sk-left-opt="back"]    { $position : 0; }

		@at-root {
			#skeleton .sk-content[data-sk-#{$position}-opt="#{$align}"] {
				@if($align != default and $align != static){
					#{$position} : 0;
				} @else {
					#{$position} : $width;
				}
			}
		}

		// > css fuer linke und rechte navi wenn
		//   top=back, top oder bottom=back, bottom ist!
		//
		//   bei top=back,top und bottom=back,bottom erhaelt
		//   linke/rechte navi auch eine data-opt Einstellung
		//
		//

		// > leftnav
		@if($position==left){
			@at-root {

			}
		}

		// > rightnav
		@if($position==right){
			@at-root {

			}
		}

	}

	/*
	 * Desktop settings
	 */

	// > sk-left-nav
    .sk-left-nav[data-sk-align="default"] {
        @include createPositions(left, default, $core-left-nav-width);
    }
	.sk-left-nav[data-sk-align="static"] {
		@include createPositions(left, static, $core-left-nav-width);
	}
    .sk-left-nav[data-sk-align="left"] {
        @include createPositions(left, left, $core-left-nav-width);
    }
    .sk-left-nav[data-sk-align="back"] {
	    @include createPositions(left, back, $core-left-nav-width);
    }

	// > sk-right-nav
    .sk-right-nav[data-sk-align="default"] {
	    @include createPositions(right, default, $core-right-nav-width);
    }
	.sk-right-nav[data-sk-align="static"] {
		@include createPositions(right, static, $core-right-nav-width);
	}
    .sk-right-nav[data-sk-align="right"] {
	    @include createPositions(right, right, $core-right-nav-width);
    }
    .sk-right-nav[data-sk-align="back"] {
	    @include createPositions(right, back, $core-right-nav-width);
    }

	// > sk-top-nav
    .sk-top-nav[data-sk-align="default"] {
	    @include createPositions(top, default, $core-top-nav-height);
    }
	.sk-top-nav[data-sk-align="static"] {
		@include createPositions(top, static, $core-top-nav-height);
	}
    .sk-top-nav[data-sk-align="top"] {
	    @include createPositions(top, top, $core-top-nav-height);
    }
    .sk-top-nav[data-sk-align="back"] {
	    @include createPositions(top, back, $core-top-nav-height);
    }

	// > sk-bottom-nav
    .sk-bottom-nav[data-sk-align="default"] {
	    @include createPositions(bottom, default, $core-bottom-nav-height);
    }
	.sk-bottom-nav[data-sk-align="static"] {
		@include createPositions(bottom, static, $core-bottom-nav-height);
	}
    .sk-bottom-nav[data-sk-align="bottom"] {
	    @include createPositions(bottom, bottom, $core-bottom-nav-height);
    }
    .sk-bottom-nav[data-sk-align="back"] {
	    @include createPositions(bottom, back, $core-bottom-nav-height);
    }

	/*
	 * Tablet/Mobile settings
	 */

    $aligns:( left, right, top, bottom );
	//key=min, value=max
	$breakpoints : ( 1024px : 951px, 950px : 481px, 480px : 351px, 350px : 280px);

	// > from the first breakpoint will all sk-contents to 0px;
	// > static is always visible
    @each $max, $min in $breakpoints {

        @media (min-width: $min) and (max-width: $max) {

            @each $nav in $aligns {
                @each $align in default, back, $nav {
                    .sk-#{$nav}-nav[data-sk-align="#{$align}"] {
                        @if $nav == left {
                            @if $align == default {}
                            @if $align == left {}
                            @if $align == back {}
                        }
                        @if $nav == right {
                            @if $align == default {}
                            @if $align == right {}
                            @if $align == back {}
                        }
                        @if $nav == top {
                            @if $align == default {}
                            @if $align == top {}
                            @if $align == back {}
                        }
                        @if $nav == bottom {
                            @if $align == default {}
                            @if $align == bottom {}
                            @if $align == back {}
                        }
                        background-color: red;
                    }
                }
            }
        }
    }
}