/* Skeleton */

/*
 * Dont be afraid about the generated css ( skeleton.css ) code !
 * Addyosmanis grunt uncss ( https://github.com/addyosmani/grunt-uncss )
 * remove, based on index.html, unused css ;)
 */

// @todo: bug: if we havent top or bottom elementin dom, the
// sk-left/sk-right/sk-content strechted to top or bottom

.overflow-hidden   { overflow : hidden; }
.overflow-auto     { overflow : auto;  }
.position-relative { position : relative ; }
.position-absolute { position : absolute ; }

body, html {
  @extend .overflow-hidden;
  height : 100%;
}

$core-main-wrapper-x : 1200px !default; // > width
$core-left-nav-x     :  300px !default; // > width
$core-right-nav-x    :  300px !default; // > width
$core-top-nav-x      :   50px !default; // > height
$core-bottom-nav-x   :  100px !default; // > height
$core-gutter         :   10px !default;

$core-first-breakpoint       : 1024px !default;

#skeleton {

    // > debug color
    background-color: gray;

    @extend .overflow-hidden;
    @extend .position-relative;

    margin     : 0 auto;
    max-width  : $core-main-wrapper-x;
    height     : auto !important;
    min-height : 100%;

    // > common atrributes

	.sk-left-nav {
		background-color: green;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 10;
		width   : $core-left-nav-x;
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);
	}
	.sk-right-nav {
		background-color: yellow;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 10;
		width   : $core-right-nav-x;
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);;
	}
    .sk-top-nav {
        background-color: red;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 9;
	    height  : $core-top-nav-x;
	    left    : 0;
	    right   : 0;
    }
    .sk-bottom-nav {
        background-color: deeppink;
        @extend .overflow-hidden;
        @extend .position-absolute;
	    z-index : 9;
	    height  : $core-bottom-nav-x;
	    left    : 0;
	    right   : 0;
    }
	// > content area
	.sk-content {
		background-color: blue;
		@extend .overflow-auto;
		@extend .position-absolute;
		z-index : 11;
		// > if we havent left or right nav in dom,
		//   this will be the default value of sk-content
		left    : 0;
		right   : 0;
		///////////////////////////////////////////
		top     : if($core-top-nav-x != 0px, $core-top-nav-x, 0);
		bottom  : if($core-bottom-nav-x != 0px, $core-bottom-nav-x, 0);;
	}

	@mixin createCoreSkWallPositions($position, $align, $width){

		// > here the outer wall( navs--> left, right, top, bottom )
		// =====================================================
		// > set position of .sk-#{$position}-nav[data-sk-align="#{$align}"]
		// > e.g. with sk-left-nav[data-sk-align="*"]

		//   .sk-left-nav[data-sk-align="left"]  { $position(left)   : -$width(300) }
		//   .sk-left-nav[data-sk-align="right"] { $position(right)  : -$width(300) }
		//   .sk-left-nav[data-sk-align="top"]   { $position(top)    : -$width(50) }
		//   .sk-left-nav[data-sk-align="bottom"]{ $position(bottom) : -$width(100) }
		//   and only aligns --> left/right/top/bottom
		//	 etc. sk-left/top/right/bottom

		// > ***INFO*** hier auch mit @at-root
		//   ********** dafuer kann das auessere von @include createPositions raus

		@if($align != default and $align != static and $align != back and $align != front){
			#{$position} : $width * -1;

			//   .sk-left-nav[data-sk-align="default"] { $position(left) : 0 }
			//   .sk-left-nav[data-sk-align="static"]  { $position(left) : 0  }
			//   .sk-left-nav[data-sk-align="back"]    { $position(left) : 0  }
			//   .sk-left-nav[data-sk-align="front"]   { $position(left) : 0  }
			//   and only aligns --> default/static/back/front
			//	 etc. sk-left/top/right/bottom

		} @else {

			#{$position} : 0;

			// > align=front has the same setting. The only difference is the z-index
			@if($align == front and ( $position == top or $position == bottom )){
				// > debug opacity
				opacity: 0.5;
				z-index: 12 !important;
			}
		}
	}
	@mixin createCoreSkContentPositions($position, $align, $width){

		// > **********************************************************************
		// > **********************************************************************

		// > here the inner wall( content )

		// > set position of .sk-content[data-sk-#{$position}-opt="#{$align}"]
		// > e.g. with sk-content[data-sk-left-top="*"]
		//   .sk-content[data-sk-left-opt="default"] { $position : $width; }
		//   .sk-content[data-sk-left-opt="static"]  { $position : $width; }
		//   .sk-content[data-sk-left-opt="front"]   { $position : 0; }
		//   .sk-content[data-sk-left-opt="left"]    { $position : 0; }
		//   .sk-content[data-sk-left-opt="right"]   { $position : 0; }
		//   .sk-content[data-sk-left-opt="back"]    { $position : 0; }
		//   .sk-content[data-sk-left-opt="top"]     { $position : 0; }
		//   .sk-content[data-sk-left-opt="bottom"]  { $position : 0; }

		@at-root {
			#skeleton .sk-content[data-sk-#{$position}-opt="#{$align}"] {
				@if($align != default and $align != static and $align){
					#{$position} : 0;
				} @else {
					#{$position} : $width !important;
				}
			}
		}
	}
	@mixin createCoreSkTopBottomPositions($position, $align, $width){

		// *** relatedTo->(1) skeleton.js ***
		// > css for left and right navi if
		//   top=back,top or bottom=back,bottom

		@if(( $align == top or $align == back or $align == bottom or $align == front ) and
			( $position == top or $position == bottom )){

			// .sk-left-nav[data-sk-top-opt="top"]    { top : 0; }
			// .sk-left-nav[data-sk-top-opt="back"]   { top : 0; }
			// .sk-left-nav[data-sk-top-opt="front"]  { top : 0; }
			// .sk-left-nav[data-sk-top-opt="bottom"] { top : 0; }

			// .sk-left-nav[data-sk-bottom-opt="top"]    { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="back"]   { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="front"]  { bottom : 0; }
			// .sk-left-nav[data-sk-bottom-opt="bottom"] { bottom : 0; }

			@at-root {
				@each $navAlign in left right {
					#skeleton .sk-#{$navAlign}-nav[data-sk-#{$position}-opt="#{$align}"] {
						#{$position} : 0;
					}
				}
			}

		}
	}
	@mixin createCoreSkFloatPositions($position, $align, $dimension){

		@debug $position $align;

	}

	/*
	 * Desktop settings
	 */

	$positions : (
		left   : $core-left-nav-x,
		right  : $core-right-nav-x,
		top    : $core-top-nav-x,
		bottom :$core-bottom-nav-x
	);

	@each $position, $dimension in $positions {

		// >>> definition description
		// @posible align: default, static, {left, right, top, bottom}, back, front
		// > all positions has following aligns: default, static, back and front,
		//   the only difference is that:
		//		- left nav has, in addition, the left align
		//		- right nav has, in addition, the right align
		//		- top nav has, in addition, the top align
		//		- bottom nav has, in addition, the bottom align
		@each $align  in default, static, $position, back, front {
			.sk-#{$position}-nav[data-sk-align="#{$align}"] {
				@include createCoreSkWallPositions($position, $align, $dimension);
				@include createCoreSkContentPositions($position, $align, $dimension);
				@include createCoreSkTopBottomPositions($position, $align, $dimension);
				@include createCoreSkFloatPositions($position, $align, $dimension);
			}
		}
	}

	/*
	 * Tablet/Mobile settings
	 */

    $aligns:( left, right, top, bottom );
	//key=min, value=max
	$breakpoints : ( 1024px : 951px, 950px : 481px, 480px : 351px, 350px : 280px);

	// > from the first breakpoint will all sk-contents to 0px;
	// > static is always visible
    @each $max, $min in $breakpoints {

        @media (min-width: $min) and (max-width: $max) {

            @each $nav in $aligns {
                @each $align in default, back, $nav {
                    .sk-#{$nav}-nav[data-sk-align="#{$align}"] {
                        @if $nav == left {
                            @if $align == default {}
                            @if $align == left {}
                            @if $align == back {}
                        }
                        @if $nav == right {
                            @if $align == default {}
                            @if $align == right {}
                            @if $align == back {}
                        }
                        @if $nav == top {
                            @if $align == default {}
                            @if $align == top {}
                            @if $align == back {}
                        }
                        @if $nav == bottom {
                            @if $align == default {}
                            @if $align == bottom {}
                            @if $align == back {}
                        }
                        background-color: red;
                    }
                }
            }
        }
    }
}